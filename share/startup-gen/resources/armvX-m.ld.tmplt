/*****************************************************************************
 *                                                                           *
 *                         Copyright (C) 2023 AdaCore                        *
 *                                                                           *
 *  GNAT is free software;  you can  redistribute it  and/or modify it under *
 *  terms of the  GNU General Public License as published  by the Free Soft- *
 *  ware  Foundation;  either version 3,  or (at your option) any later ver- *
 *  sion.  GNAT is distributed in the hope that it will be useful, but WITH- *
 *  OUT ANY WARRANTY;  without even the  implied warranty of MERCHANTABILITY *
 *  or FITNESS FOR A PARTICULAR PURPOSE.                                     *
 *                                                                           *
 *  As a special exception under Section 7 of GPL version 3, you are granted *
 *  additional permissions described in the GCC Runtime Library Exception,   *
 *  version 3.1, as published by the Free Software Foundation.               *
 *                                                                           *
 *  You should have received a copy of the GNU General Public License and    *
 *  a copy of the GCC Runtime Library Exception along with this program;     *
 *  see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see    *
 *  <http://www.gnu.org/licenses/>.                                          *
 *                                                                           *
 *****************************************************************************/
@@-----------------------------------------------------------------------------
@@--  MACROS
@@--
@@--
@@--  ALLOCATE_MAIN_STACK
@@--
@@MACRO(ALLOCATE_MAIN_STACK)@@
    __interrupt_stack_start = .;
    *(.interrupt_stacks)
    . = ALIGN(0x8);
    __interrupt_stack_end = .;

    __stack_start = .;
    . += DEFINED (__stack_size) ? __stack_size : _DEFAULT_STACK_SIZE;
    . = ALIGN(0x8);
    __stack_end = .;
@@END_MACRO@@
@@--
@@--
@@--  CREATE_RAM_SECTIONS
@@--
@@MACRO(CREATE_RAM_SECTIONS)@@
  __@_$1_@_data_load = LOADADDR(.@_$1_@_data);
  .@_$1_@_data :
  {
    __@_$1_@_data_start = .;
    *(.@_$1_@_data .@_$1_@_data.*)

    /* Ensure that the end of the data section is always word aligned.
       Initial values are stored in 4-bytes blocks so we must guarantee
       that these blocks do not fall out the section (otherwise they are
       truncated and the initial data for the last block are lost). */

    . = ALIGN(0x4);
    __@_$1_@_data_end = .;
  } >  @_$1_@ AT> @_BOOT_MEM_@
  __@_$1_@_data_words = (__@_$1_@_data_end - __@_$1_@_data_start) >> 2;

  .@_$1_@_bss (NOLOAD): {
    . = ALIGN(0x8);
    __@_$1_@_bss_start = .;

    *(.@_$1_@_bss .@_$1_@_bss.*)

@@IF@@ @_MAIN_STACK_REGION_@ = @_$1_@
@_ALLOCATE_MAIN_STACK()_@
@@END_IF@@

    __@_$1_@_bss_end = .;
    __@_$1_@_heap_start = .;
    __@_$1_@_heap_end = ORIGIN(@_$1_@) + LENGTH(@_$1_@);
  } > @_$1_@
  __@_$1_@_bss_words = (__@_$1_@_bss_end - __@_$1_@_bss_start) >> 2;
@@END_MACRO@@
@@--
@@--
@@--  CREATE_ROM_SECTIONS
@@--
@@MACRO(CREATE_ROM_SECTIONS)@@
  .@_$1_@_rodata :
  {
    __@_$1_@_rom_start = .;

    *(.@_$1_@_rodata .@_$1_@_rodata.*)
    . = ALIGN(0x4);
    __@_$1_@_rom_end = .;
  } > @_$1_@
@@END_MACRO@@
@@-----------------------------------------------------------------------------
/* This is a ARM specific version of this file */

/* This script replaces ld's default linker script, providing the
   appropriate memory map and output format. */

SEARCH_DIR(.)
__DYNAMIC  =  0;

_DEFAULT_STACK_SIZE = @_MAIN_STACK_SIZE_@;

ENTRY(Reset_Handler);

MEMORY
{
@@IF@@ @_BOOT_FROM_ROM_@
  @_BOOT_MEM_@ (rx) : ORIGIN = @_BOOT_MEM_ADDR_@, LENGTH = @_BOOT_MEM_SIZE_@
  @_MAIN_RAM_@ (rwx) : ORIGIN = @_MAIN_RAM_ADDR_@, LENGTH = @_MAIN_RAM_SIZE_@
@@ELSE@@
  @_BOOT_MEM_@ (rwx) : ORIGIN = @_BOOT_MEM_ADDR_@, LENGTH = @_BOOT_MEM_SIZE_@
@@END_IF@@
@@TABLE@@
  @_ROM_REGION_@ (rx) : ORIGIN = @_ROM_ADDR_@, LENGTH = @_ROM_SIZE_@
@@END_TABLE@@
@@TABLE@@
  @_RAM_REGION_@ (rwx) : ORIGIN = @_RAM_ADDR_@, LENGTH = @_RAM_SIZE_@
@@END_TABLE@@
}

/*
 * Boot memory (.text, .ro_data, interrupt vector): @_BOOT_MEM_@
 * Main RAM memory (.data, .bss, stacks, interrupt stacks): @_BOOT_MEM_@
 */

SECTIONS
{

@_C_COMMENT_BOX(2):BOOT_MEM_@
  .text :
  {
    KEEP (*(.vectors))
    *(.text .text.* .gnu.linkonce.t*)
    *(.gnu.warning)
    KEEP (*(.init))
    KEEP (*(.fini))
  } > @_BOOT_MEM_@

  .ARM.extab   : { *(.ARM.extab* .gnu.linkonce.armextab.*) } > @_BOOT_MEM_@
  /* .ARM.exidx is 4-bytes aligned, so __exidx_start needs to be
     aligned too. Note that assigning the location counter also makes
     ld attach the following symbols to the next section (instead of the
     previous section which is the default), so will properly
     consider the location counter of .ARM.exidx for __exidx_start and
      __exidx_end and not the previous section's one. */
  . = ALIGN(0x4);
  PROVIDE_HIDDEN (__exidx_start = .);
  .ARM.exidx   : { *(.ARM.exidx* .gnu.linkonce.armexidx.*) } > @_BOOT_MEM_@
  PROVIDE_HIDDEN (__exidx_end = .);

  .preinit_array     :
  {
    PROVIDE_HIDDEN (__preinit_array_start = .);
    KEEP (*(.preinit_array*))
    PROVIDE_HIDDEN (__preinit_array_end = .);
  } > @_BOOT_MEM_@

  .init_array :
  {
    PROVIDE_HIDDEN (__init_array_start = .);
    KEEP (*(SORT(.init_array.*)))
    KEEP (*(.init_array*))
    PROVIDE_HIDDEN (__init_array_end = .);
  } > @_BOOT_MEM_@

  .fini_array :
  {
    PROVIDE_HIDDEN (__fini_array_start = .);
    KEEP (*(SORT(.fini_array.*)))
    KEEP (*(.fini_array*))
    PROVIDE_HIDDEN (__fini_array_end = .);
  } > @_BOOT_MEM_@

  .rodata :
  {
    *(.lit)
    *(.rodata .rodata.* .gnu.linkonce.r*)
    . = ALIGN(0x4);
    __rom_end = .;
  } > @_BOOT_MEM_@
@_C_COMMENT_BOX(2/End of ):BOOT_MEM_@

@_C_COMMENT_BOX(2):MAIN_RAM_@
  __data_load = LOADADDR(.data);
  .data :
  {
    __data_start = .;
    *(.data .data.* .gnu.linkonce.d*)

    /* Ensure that the end of the data section is always word aligned.
       Initial values are stored in 4-bytes blocks so we must guarantee
       that these blocks do not fall out the section (otherwise they are
       truncated and the initial data for the last block are lost). */

    . = ALIGN(0x4);
    __data_end = .;
  } > @_MAIN_RAM_@ AT> @_BOOT_MEM_@
  __data_words = (__data_end - __data_start) >> 2;

  .bss (NOLOAD): {
   . = ALIGN(0x8);
   __bss_start = .;

   *(.bss .bss.*)
   *(COMMON)

   . = ALIGN(0x8);    /* Align the stack to 64 bits */
   __bss_end = .;

@@IF@@ @_MAIN_STACK_REGION_@ = @_MAIN_RAM_@
@_ALLOCATE_MAIN_STACK()_@
@@END_IF@@

   _end = .;
   __heap_start = .;
   __heap_end = ORIGIN(@_MAIN_RAM_@) + LENGTH(@_MAIN_RAM_@);
  } > @_MAIN_RAM_@
  __bss_words = (__bss_end - __bss_start) >> 2;
@_C_COMMENT_BOX(2/End of ):MAIN_RAM_@

@@--
@@--
@@-- For all ROM regions besides BOOT_MEM
@@--
@@IF@@ @_SIZE:ROM_REGION_@ > 0
@@TABLE@@
@_C_COMMENT_BOX(2):ROM_REGION_@
@_CREATE_ROM_SECTIONS(@_ROM_REGION_@)_@
@_C_COMMENT_BOX(2/End of ):ROM_REGION_@

@@END_TABLE@@
@@END_IF@@
@@--
@@--
@@-- For all RAM regions besides main RAM
@@--
@@IF@@ @_SIZE:RAM_REGION_@ > 0
@@TABLE@@
@_C_COMMENT_BOX(2):RAM_REGION_@
@_CREATE_RAM_SECTIONS(@_RAM_REGION_@)_@
@_C_COMMENT_BOX(2/End of ):RAM_REGION_@

@@END_TABLE@@
@@END_IF@@
  /* DWARF debug sections.
     Symbols in the DWARF debugging sections are relative to the beginning
     of the section so we begin them at 0.  */
  /* DWARF 1 */
  .debug          0 : { *(.debug) }
  .line           0 : { *(.line) }
  /* GNU DWARF 1 extensions */
  .debug_srcinfo  0 : { *(.debug_srcinfo) }
  .debug_sfnames  0 : { *(.debug_sfnames) }
  /* DWARF 1.1 and DWARF 2 */
  .debug_aranges  0 : { *(.debug_aranges) }
  .debug_pubnames 0 : { *(.debug_pubnames) }
  /* DWARF 2 */
  .debug_info     0 : { *(.debug_info .gnu.linkonce.wi.*) }
  .debug_abbrev   0 : { *(.debug_abbrev) }
  .debug_line     0 : { *(.debug_line) }
  .debug_frame    0 : { *(.debug_frame) }
  .debug_str      0 : { *(.debug_str) }
  .debug_loc      0 : { *(.debug_loc) }
  .debug_macinfo  0 : { *(.debug_macinfo) }
  /* DWARF 3 */
  .debug_pubtypes 0 : { *(.debug_pubtypes) }
  .debug_ranges   0 : { *(.debug_ranges) }
  .gnu.attributes 0 : { KEEP (*(.gnu.attributes)) }
  /DISCARD/ : { *(.note.GNU-stack) *(.gnu_debuglink) *(.gnu.lto_*) }
}
